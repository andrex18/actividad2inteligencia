import heapq

# Definimos la base de conocimiento
knowledge_base = {
    "conexiones": {
        "A": ["B", "C"],
        "B": ["D"],
        "C": ["D"],
        "D": ["E"],
    }
}

# Defninimos la estructura de datos
sistema_transporte = {
    "estaciones": ["A", "B", "C", "D", "E"],
    "conexiones": {
        "A": ["B", "C"],
        "B": ["A", "D"],
        "C": ["A", "D"],
        "D": ["B", "C", "E"],
        "E": ["D"],
    }
}

# Implementamos el algoritmo
def dijkstra(inicio, objetivo, conexiones):
    cola = [(0, inicio, [])]
    visitado = set()
    while cola:
        (_, estacion_actual, ruta) = heapq.heappop(cola)
        if estacion_actual not in visitado:
            visitado.add(estacion_actual)
            ruta = ruta + [estacion_actual]
            if estacion_actual == objetivo:
                return ruta
            for vecino in conexiones[estacion_actual]:
                if vecino not in visitado:
                    heapq.heappush(cola, (0, vecino, ruta))
    return []

# corremos el codigo
inicio = "A"
objetivo = "E"
ruta_optima = dijkstra(inicio, objetivo, sistema_transporte["conexiones"])

if ruta_optima:
    print(f"La mejor ruta desde {inicio} hasta {objetivo} es:", ruta_optima)
else:
    print("No se encontr√≥ una ruta desde", inicio, "hasta", objetivo)
